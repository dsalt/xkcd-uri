#! /usr/bin/perl -w
#
# xkcd URI launcher
#
#   DO WHAT THOU WILT PUBLIC LICENCE
#
#   Copyright 2014 Darren Salt <devspam@moreofthesa.me.uk>
#
#   All are permitted to copy and distribute verbatim or modified copies of
#   this licence document. Changing it is allowed as long as the name is
#   changed.
#
#   DO WHAT THOU WILT PUBLIC LICENCE
#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 
#
#   0. Do what thou wilt shall be the whole of this licence.
#
# i.e. distribute, alter etc. as you like!

=head1 NAME

xkcd-uri - using a browser, open an XKCD cartoon or search XKCD

=head1 SYNOPSIS

B<xkcd-uri> [B<-n>|B<--print-uri>] [xkcd://][I<NUMBER>|I<TEXT>]

=head1 DESCRIPTION

B<xkcd-uri> is a simple program which instructs your browser to open a
specific XKCD cartoon or search available XKCD cartoons.

B<xdg-open> is used to launch the URL.

=head1 OPTIONS

=over 12

=item B<-n>, B<--print-uri>

Print the URL instead of launching it.

=back

=head1 AUTHOR

Darren Salt

=head1 SOURCE

L<xkcd-uri source on Github|https://github.com/dsalt/xkcd-uri>

=cut

use integer;
use Getopt::Long qw(:config bundling no_getopt_compat no_auto_abbrev); # no permute, no --opt=

use constant {
  VERSION_TEXT => "xkcd-uri version 0.1\n",
  DESCRIPTION  => "xkcd-uri: using a browser, open an XKCD cartoon or search XKCD\n",
  USAGE_TEXT   => "Usage: $0 [-n|--print-uri] [xkcd://][NUMBER|TEXT]\n",
  LAUNCHER     => 'xdg-open',
  BASE_URL     => 'http://xkcd.com/',
  SEARCH_URL   => 'http://www.google.com/cse?cx=012652707207066138651:zudjtuwe28q&ie=UTF-8&q=',
};

# Output help, version or usage then exit

sub show_version()
{
  print VERSION_TEXT;
  exit 0;
}

sub show_help()
{
  print DESCRIPTION, USAGE_TEXT;
  exit 0;
}

sub usage()
{
  print STDERR USAGE_TEXT;
  exit 2;
}

# Launch or print URL then exit

sub launch_print($)
{
  print "$_[0]\n";
  exit 0;
}

sub launch_real($)
{
  exec LAUNCHER, $_[0];
  exit 0;
}

# Option parsing
my $printuri = 0;
GetOptions ('h|help' => \&show_help,
            'v|version' => \&show_version,
            'n|print-uri' => \$printuri) or usage();

# Select what to do with URLs
my $launch = $printuri ? \&launch_print : \&launch_real;

# No argument -> current cartoon
&{$launch}(BASE_URL) if $#ARGV < 0;

# Treat all remaining arguments as a single string
my $content = join(' ', @ARGV); # <- this is tainted, but we're not interested in that

# Strip protocol info _and_ any trailing slash
my $is_uri = 0;
if ($content =~ /^xkcd:\/\//)
{
  $content =~ s%^xkcd://(.*?)/?$%$1%msi;
  $is_uri = 1;
}

# Empty -> current cartoon
&{$launch}(BASE_URL . $content) if $content eq '';

# Bare number -> specific cartoon
&{$launch}(BASE_URL . $content) if $content =~ /^[0-9]+$/;

# If we reach this point, we have text; so launch a search page

# URI decode if needed
if ($is_uri)
{
  $content =~ s/\+/ /g;
  $content =~ s/%([[:xdigit:]]{2})/chr(eval("0x$1"))/eg if $is_uri;
}

# Collapse spaces
$content =~ s/[[:space:]]+/ /g;

# Length check
# die "$0: search string is too long" if length($content) > 31;

# URI encode
$content =~ s~([\x00-\x1F%!#$%&'()*+,/:;=?@\[\]])~sprintf "%%%02X", ord $1~eg;
$content =~ s/ /+/g;

# Launch
&{$launch}(SEARCH_URL . $content);
